<html xmlns="http://www.w3.org/1999/xhtml" hasBrowserHandlers="true">
<head>
<title>16K video codec 1.0.0.0</title>
<meta charset="utf-8">
<style>
textarea {
  width : 73%; 
  height : 83%; 
  overflow : auto;
  font-style : monospace;
  font-size : 10pt;
  font-color : #808080;
}
</style>
<script>

function _flags(n){
  for(i=0;i<n;i++){
    this.push('0x'+Math.pow(2,i).toString(16))
  }
}
_flags.prototype = []

function _PC(z){
  for(i=0;i<z.platform;i++){
    this.push(false)
  }
}
_PC.prototype = []

var oscpu = window.navigator.oscpu.match(64)?64:32

var Z = {
  platform : oscpu,
  nPC : (oscpu==64)?16e18:4e12,
  nPC_overflow : (oscpu==64)?16e18:4e12,
  flag : new _flags(oscpu),
  bytes: new _flags(8)
}

function _kmap(){
  this[0] = new _PC(Z)
  this[1] = new _PC(Z)
  this.tick = 0
  this.optimize = function(bit){
    var tick = this.tick++
    var kmin = this[bit] = this[bit].map(function(u,j){
      var pc = (Z.flag[j] & tick)>>j
      if(u != '-'){
        if(!u && pc){
          u = true
        }
        else
        if((u && pc) || (!u && !pc)){
          // NOP //
        }
        else{
          u = '-'
        }// test null
      }// test '-'
      return u
    })
    if(this.tick>Z.nPC){
      this.parent.push(new _kmap())
    }
    return kmin
  } // optimize
}
_kmap.prototype = {}

var _16k_codec = new Worker("16K_codec_Worker.1.js")

_16k_codec.addEventListener(
  "message",
  function(e){
  },"16K_codec.htm")

var charSet = {}

"1234567890`~!@#$%^&*()-_=+\\;:'\"|,<.>/?{}[]abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\t\n "
.split("")
.map(function(w){
  charSet[w.charCodeAt()] = w
})

Object.prototype.toHex = function(){
  return this < 16 ? '0'+this.toString( 16 ) : this.toString( 16 )
}
XMLHttpRequest.prototype._num2bytes = function(sData) {
  return(new Uint8Array(sData.length).map(
    function(w,nIdx){
      return (w & 0xff)
    })
  )
}
XMLHttpRequest.prototype._ch2bytes = function(sData) {
  /* send as ArrayBufferView...: */
  /* ...or as ArrayBuffer (legacy)...:*/
  // this.send(ui8Data)
  // this.send(ui8Data.buffer)
  return(new Uint8Array(sData.length).map(
    function(w,nIdx){
      return (sData.charCodeAt(nIdx) & 0xff)
    })
  )
}
function ByteStream(code_editor,meta_editor,lstatus){
  var self = this
  this.url = ""
  this.urlSave = ""
  this.byteStream = 0x00
  this.codeStream = 0x00
  this.metaStream = ""
  this.code_editor = code_editor
  this.meta_editor = meta_editor
  this.meta_editor.kmap = [new _kmap()]
  this.meta_editor.kmap.parent = this.meta_editor.kmap
  this.status_window = lstatus
  this.scrollDirective = 1840*2 // 40 lines x 46 columns = 1840 bytes visible //
  this.byteScrollTop = 1840*2+1
  this.metaScrollTop = 1840*2+1
  this.byteScroll_pixelTop = 0
  this.metaScroll_pixelTop = 0
  this.proceed = false
  this.callback = function(){
    var a = [
      function(){
        try{
          if(self.byteScroll_pixelTop+self.byteScrollTop<self.codeStream.length){
            var stride = self.byteScroll_pixelTop+self.byteScrollTop
            self.code_editor.value += self.codeStream.slice(self.byteScroll_pixelTop,stride).join(" ")
            self.byteScroll_pixelTop += self.byteScrollTop          
          }
          else
          if((self.byteScroll_pixelTop+self.byteScrollTop>=self.codeStream.length) && 
            (self.byteScroll_pixelTop<self.codeStream.length)){
            var stride = self.codeStream.length
            self.code_editor.value += self.codeStream.slice(self.byteScroll_pixelTop,stride).join(" ")
            self.byteScroll_pixelTop += self.byteScrollTop
          }
        }
        catch(e){
          console.log(e)        
        }
      },
      function(){
        try{
          if(self.metaScroll_pixelTop+self.metaScrollTop<self.metaStream.length){
            var stride = self.metaScroll_pixelTop+self.metaScrollTop
            var offset = self.meta_editor.kmap.length-1
            self.metaStream.slice(self.metaScroll_pixelTop,stride).map(
              function(w,i){
                Z.bytes.map(function(v,j){
                  var bit = (w & v)>>j // 0 or 1 ?
                  self.meta_editor.kmap[offset].optimize(bit)
                })
              })
            self.meta_editor.value = JSON.stringify(self.meta_editor.kmap)
            self.metaScroll_pixelTop += self.metaScrollTop
          }
          else
          if((self.metaScroll_pixelTop+self.metaScrollTop>=self.metaStream.length) &&
            (self.metaScroll_pixelTop<self.metaStream.length)){
            var stride = self.metaStream.length
            var offset = self.meta_editor.kmap.length-1
            self.metaStream.slice(self.metaScroll_pixelTop,stride).map(
              function(w,i){
                Z.bytes.map(function(v,j){
                  var bit = (w & v)>>j // 0 or 1 ?
                  self.meta_editor.kmap[offset].optimize(bit)
                })
              })
            self.meta_editor.value = JSON.stringify(self.meta_editor.kmap)
            self.metaScroll_pixelTop += self.metaScrollTop
          }
        }
        catch(e){
          console.log(e)
        }
      },
    ]
    if(self.proceed){
      a.map(function(w){
        return w()
      })
    }
  }
  setInterval(this.callback,1)
}ByteStream.prototype = {}

ByteStream.prototype.__byteStream__ = function (putget){
  var self = this
  var xhr = new XMLHttpRequest()
  var async = true
  if(putget === "GET"){
    xhr.open(putget,this.url,async)
    xhr.responseType = "arraybuffer"
    xhr.onreadystatechange = function(e){
      var banner = [
        function(){
          return "Processing file..." // 0 UNSENT
          }, 
        function(){
          return "Opening file..."    // 1 OPENED
          },
        function(){
          return "Initializing..."    // 2 HEADERS_RECEIVED
          },
        function(v){
          var status = {
            PUT:function(){
              return "Saving file..."
              },
            GET:function(){
              return "Loading file..."
              },
            default:function(w){
              var msg = {
                PUT:"LOAD",
                GET:"SAVE",
                }
              return Error("Unable to complete "+msg[v]+" operation.")
              },
          }
          return status[v]() || status.default(v)    // 3 LOADING
          },
        function(v){ 
          self.byteStream = self.metaStream = new Uint8Array( xhr.response )
          self.codeStream = new Array()
          self.byteStream.map(
            function(w,i){
              var v = w.toHex()
              self.codeStream[i] = v
              return w
            })
          self.byteScroll_pixelTop = 0
          self.metaScroll_pixelTop = 0
          self.proceed = true
          return "Ready"  // 4 DONE
          },              
      ]
      self.status_window.innerHTML = banner [ xhr.readyState ] (putget) || 
      Error("ByteStream::__byteStream__ - Failed - xhr.readyState :",xhr.readyState,"| putget :",putget,"| Please try again.")
    }
    xhr.send()
  }
  else
  if(putget === "POST"){
    xhr.open(putget,"hexeditor.py",async)
    if(code00.checked){
      xhr.send(xhr._num2bytes(self.code_editor.value.split(/\s+/g)))
    }
    else
    if(code01.checked){
      var formData = new FormData()
      xhr.send(self.meta_editor.value)
    }
    else
    if(code02.checked){
      xhr.send(xhr._ch2bytes(self.meta_editor.value))
    }
  }
}

// 16 K decode
ByteStream.prototype.openDumpStream = function (w){
  try{
    if(w && w.name && (w.name != this.url)){
      this.url = w.name
      this.__byteStream__('GET')
    }
    else
    if(w && w.name){
      this.byteScroll_pixelTop = this.metaScroll_pixelTop = 0
      this.proceed = true
    }
  } 
  catch(e){
    console.log(e)
  }
}

// 16 K encode
ByteStream.prototype.openUnDumpStream = function (w){
  try{
    if(w && w.name && (w.name != this.url)){
      this.url = w.name
      this.__byteStream__('GET')
    }
    else
    if(w && w.name){
      this.byteScroll_pixelTop = this.metaScroll_pixelTop = 0
      this.proceed = true
    }
  } 
  catch(e){
    console.log(e)
  }
}

ByteStream.prototype.saveDumpStream = function (w){
  try{
    if(w && w.name){
      this.urlSave = w.name
      this.__byteStream__('POST')
    }
  } 
  catch(e){
    console.log(e)
  }
}

</script>
</head>
<br>
<input id=btnStream type=file /><br>
<br>
<div>
<input id=btnDump type=button value="decode 16K" /> <input id=btnUnDump type=button value="encode 16K" /> | <input id=btnClear type=button value="clear source window"/> 
<div id=loadstatus style="float : right"> Ready</div>
</div>
<br>
<div>
<textarea id=byteresult name=area00></textarea>
<textarea id=metaResult name=area01 style="width : 24%;"></textarea>
</div>
<input id=btnSave type=button value=" Save " /><input id=btnSaveStream type=file />
<input id=code00 type="radio" checked=TRUE onclick="code01.checked=code02.checked=false"/> <label>byte code</label> | 
<input id=code01 type="radio" onclick="code00.checked=code02.checked=false"/> <label>text-only</label> |
<input id=code02 type="radio" onclick="code00.checked=code01.checked=false"/> <label>text as byte code</label>
<footer>

<script>

var __file__ = new ByteStream(byteresult, metaResult, loadstatus)
 
input:onclick = function(e){
  var __status__ = {
    "btnDump" : function(){
        __file__.openDumpStream(btnStream.files[0])
        },
    "btnUnDump" : function(){
        __file__.openUnDumpStream(btnStream.files[0])
        },
    "btnSave" : function(){
        __file__.saveDumpStream(btnSaveStream.files[0])
        },
    "btnClear" : function(){
        __file__.proceed = false
        byteresult.value = ''
        metaResult.value = ''
        },
  }
  if(__status__[e.target.id]){
    __status__[e.target.id]()
  }
}

byteresult.addEventListener("scroll", 
  function(e){
    if(e.target.id == 'byteresult'){
      metaResult.scrollTop = e.target.scrollTop
    }
  })

metaResult.addEventListener("scroll", 
  function(e){
    if(e.target.id == 'metaResult'){
      byteresult.scrollTop = e.target.scrollTop
    }
  })

btnSave:click = function(w){
  alert(this.files[0].name)
}
</script>

</footer>
</html>