<html xmlns="http://www.w3.org/1999/xhtml" hasBrowserHandlers="true">
<head>
<title>16K Suffix Tree Generator 1.0.0.0</title>
<meta charset="utf-8">
<style>
textarea {
  width : 73%; 
  height : 83%; 
  overflow : auto;
  font-style : monospace;
  font-size : 10pt;
  font-color : #808080;
}
</style>
<script>

/* 

  Copyright (c) 2016, Seagat2011
  All rights reserved.

  This software is accompanied by a copy of the GNU v2 license!

  Should any portion of the following copyright and permission notice interfere
  with the spirit of the GNU v2 license, the GNU v2 license shall override and 
  apply:

  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to
  deal in the Software without restriction, including without limitation the
  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
  sell copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:

  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES
  LOSS OF USE, DATA, OR PROFITS OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

  TITLE
    16K Suffix Tree Generator
  
  DESCRIPTION
    encode a suffix tree series into a more condensed format
    
  AUTHOR
    Seagat2011
  
  INPUT
    suffix tree series (as bytes) from 16K_codec.*.htm
        
    "0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::
     0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::
     0::0::0::0::0::0::0::0::0::0::0::0::0::0::1::1::0::0::0"1,
    "0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::
     0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::
     0::0::0::0::0::0::0::0::0::0::1::0::0::0::1::1::0::0::0"1,
    "0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::
     0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::
     0::0::0::0::0::0::0::0::0::1::0::0::0::0::1::1::0::0::0"1,
    
  OUTPUT
    a condensed suffix tree
    
    "0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::
     0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::0::
     0::0::0::0::0::0::0::0::0::{0:0,|1:11,}::{0:11,|1:10,}::0::0::0::1::1::0::0::0"1
    
  VERSION
    Major.Minor.Bugfix.Patch
    1.0.0.0

*/

function _flags(n){
  for(i=0;i<n;i++){
    this.push('0x'+Math.pow(2,i).toString(16))
  }
}
_flags.prototype = []

var oscpu = window.navigator.oscpu.match(64)?64:32

var Z = {
  platform : oscpu,
  nPC : (oscpu==64)?16e18:4e12,
  nPC_overflow : (oscpu==64)?16e18:4e12,
  flag : new _flags(oscpu),
  _byte: new _flags(64)
}

function g_suffix_tree(o,a,i,bit){
  var result = {}
  if(i++<a.length){
    result[a[i]&1] = g_suffix_tree(o,a,i,bit)
  }
  else{
    result[a[i]&1] = bit
  }
  return result
}

function _kmap(){
  var self = this
  this.tick = 0
  this.bit = {}
  this.optimize = function(bitmap){
    var params = bitmap.split('"')
    var bit = params[2]&1
    var p = params[1].split('::')
    var n = p[0]
    p.shift()
    p.shift()
    var isInitialized = (n in this.bit)
    if(!isInitialized){
      this.bit[n] = {}
    }
    this.bit[n] = p.map(
      function(w,j){
        var indexInitialized = (j in self.bit[n])
        var hasaConflict = (w != self.bit[n][j])
        if(indexInitialized && hasaConflict){
          var tick = self.tick.toString(2)
          var u = self.bit[n][j]
          var hasScope = v = u.match(/\{.*\}/)
          if(hasScope){
            v = v[0].split('|')
            var matchesLHS = v_lhs = v[0].match(/\{0/)
            var matchesRHS = v_rhs = v[1].match(/,\}/)
            if(matchesLHS && !w&1){
              v[0] += (v[0].match(/:/g)?"":":")+tick+","
              w = v.join('|')
            }
            else
            if(matchesRHS && w&1){
              v[1] = v[1].replace(/,\}/,(v[1].match(/:/g)?",":"")+tick+",}")
              w = v.join('|')
            }
          }
          else{
            if(w&1){
              w = '{'+u+'|'+w+':'+tick+',}'
            }
            else{
              w = '{'+w+':'+tick+',|'+u+'}'            
            }
          }
        }
        return w
      })
    this.tick++
    kmin = this.bit
    return kmin
  } // optimize
}
_kmap.prototype = {}

var _16k_codec = new Worker("16K_codec_Worker.1.js")

_16k_codec.addEventListener(
  "message",
  function(e){
  },"16K_codec.htm")

var charSet = {}

"1234567890`~!@#$%^&*()-_=+\\;:'\"|,<.>/?{}[]abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\t\n "
.split("")
.map(function(w){
  charSet[w.charCodeAt()] = w
})

Object.prototype.toHex = function(){
  return this < 16 ? '0'+this.toString( 16 ) : this.toString( 16 )
}
XMLHttpRequest.prototype._num2bytes = function(sData) {
  return(new Uint8Array(sData.length).map(
    function(w,nIdx){
      return (w & 0xff)
    })
  )
}
XMLHttpRequest.prototype._ch2bytes = function(sData) {
  /* send as ArrayBufferView...: */
  /* ...or as ArrayBuffer (legacy)...:*/
  // this.send(ui8Data)
  // this.send(ui8Data.buffer)
  return(new Uint8Array(sData.length).map(
    function(w,nIdx){
      return (sData.charCodeAt(nIdx) & 0xff)
    })
  )
}
function ByteStream(code_editor,meta_editor,lstatus){
  var self = this
  this.url = ""
  this.urlSave = ""
  this.byteStream = 0x00
  this.codeStream = 0x00
  this.metaStream = ""
  this.code_editor = code_editor
  this.meta_editor = meta_editor
  this.meta_editor.kmap = [new _kmap()]
  this.meta_editor.kmap.parent = this.meta_editor.kmap
  this.status_window = lstatus
  this.scrollDirective = 1840*2 // 40 lines x 46 columns = 1840 bytes visible //
  this.byteScrollTop = 1840*2+1
  this.metaScrollTop = 1840*2+1
  this.byteScroll_pixelTop = 0
  this.metaScroll_pixelTop = 0
  this.proceed = false
  this.callback = function(){
    var a = [
      function(){
        try{
          var result = []
          var offset = self.meta_editor.kmap.length-1
          self.codeStream.slice(0).map(
            function(bitmap,i){
              self.meta_editor.kmap[offset].optimize(bitmap)
            })
          for(var w in self.meta_editor.kmap[offset].bit){
            if(self.meta_editor.kmap[offset].bit.hasOwnProperty(w)){
              self.meta_editor.kmap[offset].bit[w] = self.meta_editor.kmap[offset].bit[w].join("::")
            }
          }
          self.meta_editor.value = JSON.stringify(self.meta_editor.kmap[offset].bit)
          self.proceed = false
          //clearInterval(GID)
        }
        catch(e){
          console.log(e)        
        }
      },
      function(){
        try{
        //
        }
        catch(e){
          console.log(e)
        }
      },
    ]
    if(self.proceed){
      a.map(function(w){
        return w()
      })
    }
  }
  GID = setInterval(this.callback,1)
}ByteStream.prototype = {}

ByteStream.prototype.__byteStream__ = function (putget){
  var self = this
  if(putget === "GET"){
    self.byteStream = byteresult.value.replace(/[^\d:\"x,]/g,'').split(",")
    self.codeStream = new Array()
    self.byteStream.map(
      function(w,i){
        self.codeStream[i] = w//v
        return w
      })
    self.byteScroll_pixelTop = 0
    self.metaScroll_pixelTop = 0
    self.proceed = true
    return "Ready"  // 4 DONE
  }
  else
  if(putget === "POST"){
    xhr.open(putget,"hexeditor.py",async)
    if(code00.checked){
      xhr.send(xhr._num2bytes(self.code_editor.value.split(/\s+/g)))
    }
    else
    if(code01.checked){
      var formData = new FormData()
      xhr.send(self.meta_editor.value)
    }
    else
    if(code02.checked){
      xhr.send(xhr._ch2bytes(self.meta_editor.value))
    }
  }
}

// 16 K decode
ByteStream.prototype.openDumpStream = function (w){
  try{
      this.__byteStream__('GET')
  } 
  catch(e){
    console.log(e)
  }
}

// 16 K encode
ByteStream.prototype.openUnDumpStream = function (w){
  try{
    if(w && w.name && (w.name != this.url)){
      this.url = w.name
      this.__byteStream__('GET')
    }
    else
    if(w && w.name){
      this.byteScroll_pixelTop = this.metaScroll_pixelTop = 0
      this.proceed = true
    }
  } 
  catch(e){
    console.log(e)
  }
}

ByteStream.prototype.saveDumpStream = function (w){
  try{
    if(w && w.name){
      this.urlSave = w.name
      this.__byteStream__('POST')
    }
  } 
  catch(e){
    console.log(e)
  }
}

</script>
</head>
<br>
<div>
<input id=btnDump type=button value="decode 16K" /> <input id=btnUnDump type=button value="encode 16K" /> | <input id=btnClear type=button value="clear source window"/> 
<div id=loadstatus style="float : right"> Ready</div>
</div>
<br>
<div>
<textarea id=byteresult name=area00></textarea>
<textarea id=metaResult name=area01 style="width : 24%;"></textarea>
</div>
<input id=btnSave type=button value=" Save " /><input id=btnSaveStream type=file />
<input id=code00 type="radio" checked=TRUE onclick="code01.checked=code02.checked=false"/> <label>byte code</label> | 
<input id=code01 type="radio" onclick="code00.checked=code02.checked=false"/> <label>text-only</label> |
<input id=code02 type="radio" onclick="code00.checked=code01.checked=false"/> <label>text as byte code</label>
<footer>

<script>

var __file__ = new ByteStream(byteresult, metaResult, loadstatus)
 
input:onclick = function(e){
  var __status__ = {
    "btnDump" : function(){
        __file__.openDumpStream()//btnStream.files[0])
        },
    "btnUnDump" : function(){
        __file__.openUnDumpStream(btnStream.files[0])
        },
    "btnSave" : function(){
        __file__.saveDumpStream(btnSaveStream.files[0])
        },
    "btnClear" : function(){
        __file__.proceed = false
        //byteresult.value = ''
        metaResult.value = ''
        },
  }
  if(__status__[e.target.id]){
    __status__[e.target.id]()
  }
}

byteresult.addEventListener("scroll", 
  function(e){
    if(e.target.id == 'byteresult'){
      metaResult.scrollTop = e.target.scrollTop
    }
  })

metaResult.addEventListener("scroll", 
  function(e){
    if(e.target.id == 'metaResult'){
      byteresult.scrollTop = e.target.scrollTop
    }
  })

btnSave:click = function(w){
  alert(this.files[0].name)
}
</script>

</footer>
</html>